# This is a template of makefile for several Fortran programs sharing
# some source files, with at least three source files per program. All
# the source files must be in a single directory.

# Replace 1 and 2 in variable names by meaningful strings.

# This is a makefile for GNU make.

# 1. Source files

VPATH = .
# (this variable should be overriden on the command line when "make"
# is invoked from a directory other than the main source directory)

# Write source file names, without path, separated by blanks, not
# commas. Only .f* files, not included files. Also the files
# containinig the main program units.
common_sources = src 
src_1_only = input_reader 
src_2_only = tests 

# Or, if there are many files, they may be listed in separate files,
# one file name per line:
common_sources := $(shell cat ${VPATH}/src)
src_1_only := $(shell cat ${VPATH}/input_reader)
src_2_only := $(shell cat ${VPATH}/tests)

sources = ${src_1_only} ${src_2_only} ${common_sources}
cpp_macros = 

# 2. Objects and executable files

obj_1 := $(addsuffix .o, $(sort $(basename ${common_sources} ${src_1_only})))
obj_2 := $(addsuffix .o, $(sort $(basename ${common_sources} ${src_2_only})))
# (sort for order of compilation)

objects := $(addsuffix .o, $(basename ${sources}))

# Or, if all the source files have the same suffix, more simply:
obj_1 := $(sort $(patsubst %.f90, %.o, ${common_sources} ${src_1_only}))
obj_2 := $(sort $(patsubst %.f90, %.o, ${common_sources} ${src_2_only}))
objects := $(sources:.f90=.o)

execut = msr1d 

# 3. Compiler-dependent part

# Here, possibly, specify macros for the compiler, or include a file.
# If a file is included:
#mode = debug
#include Compiler_options/${FC}_${mode}.mk
## or just :
#include ${FC}_${mode}.mk
## or any relative path to "${FC}_${mode}.mk".

F90 = gfortran
FFLAGS = -g -founds-check -fdefault-real-8
LIB = -llapack -lblas

# 4. Rules

SHELL = /bin/sh 
# for echo in log commands

.DELETE_ON_ERROR:
.PHONY: all clean clobber depend

all: ${execut} log
# (should be the first rule)

# Do not include TAGS in "all" because, with make.sh, TAGS would use
# absolute paths.

${execut}: $(objects)
	$(F90) $(FFLAGS) $^ -o $@ 

# Add corresponding executable files:
...: ${obj_1}
...: ${obj_2}

depend ${VPATH}/depend.mk:
	makedepend $(addprefix -D, ${cpp_macros}) -free -Wmissing -Wconfused -I${VPATH} -nosrc $(addprefix -u , ...) ${sources} >${VPATH}/depend.mk
# (See whether you need the "-D", "-free" and "-u" options.)

TAGS: ${sources}
	ctags -e --language-force=fortran $^
# Or, on barren machines:
##	etags --language=fortran $^

clean:
	rm -f ${execut} ${objects} log

clobber: clean
	rm -f *.mod ${VPATH}/depend.mk TAGS

log:
	hostname >$@
	${F90} ${version_flag} >>$@ 2>&1
	echo -e "\nFC = ${FC}\n\nCPPFLAGS = ${CPPFLAGS}\n\nFFLAGS = ${FFLAGS}\n\nLDLIBS = ${LDLIBS}\n\nLDFLAGS = ${LDFLAGS}" >>$@

